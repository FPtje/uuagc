
imports
{
import UU.Pretty
}
TYPE Exprs    = [Expr]
             

TYPE Decls    = [Decl]
TYPE DataAlts = [DataAlt]
            
TYPE Types    = [Type]
             


DATA Program  | Program          decls : Decls

DATA Expr     | Let              decls : Decls   
                                 body  : Expr
              | Lambda           args :  {[String]}
                                 body : Expr
              | TupleExpr        exprs : Exprs
	      | UnboxedTupleExpr exprs : Exprs
              | App              name  : {String} 
                                 args  : Exprs
              | SimpleExpr       txt   : {String}
              | PP               pp    : {PP_Doc}


DATA Decl     | Decl             left  : Lhs 
                                 rhs   : Expr
              | Data             name  : {String} 
                                 alts  : DataAlts
                                 derivings : {[String]}
              | NewType          name  : {String} 
                                 con   : {String} 
                                 tp    : Type
              | Type             name  : {String} 
                                 tp    : Type
              | TSig             name  : {String} 
                                 tp    : Type
              | Comment          txt   : {String}


DATA DataAlt  | DataAlt          name  : {String} 
                                 args  : {[String]}
              | Record           name  : {String} 
                                 args  : {[(String,String)]}
DATA Type     | Arr              left  : Type 
                                 right : Type
              | TupleType        tps   : Types
	      | UnboxedTupleType tps   : Types
              | List             tp    : Type
              | SimpleType       txt   : {String}
	       
DATA Lhs      | Pattern          pat   : {PP_Doc}
              | TupleLhs         comps : {[String]}
              | UnboxedTupleLhs  comps : {[String]}
              | Fun              name  : {String} 
                                 args  : Exprs

{
-- Unboxed tuples
--   unbox  Whether unboxed tuples are wanted or not
--   inh    The inherited attributes. 
--          If there are none, no unboxing can take place, 
--          because in that case the semantic funtion would have a unboxed type.
-- Of course we can't have an unboxed 1-tuple
makeTupleExpr :: Bool -> [a] -> Exprs -> Expr
makeTupleExpr unbox inh exprs | not unbox || null inh || length exprs == 1 = TupleExpr exprs
                              | otherwise                                  = UnboxedTupleExpr exprs
makeTupleType :: Bool -> [a] -> Types -> Type
makeTupleType unbox inh tps | not unbox || null inh || length tps == 1 = TupleType tps
                            | otherwise                                = UnboxedTupleType tps
makeTupleLhs :: Bool -> [a] -> [String] -> Lhs
makeTupleLhs  unbox inh comps | not unbox || null inh || length comps == 1 = TupleLhs comps
                              | otherwise                                  = UnboxedTupleLhs comps
}
